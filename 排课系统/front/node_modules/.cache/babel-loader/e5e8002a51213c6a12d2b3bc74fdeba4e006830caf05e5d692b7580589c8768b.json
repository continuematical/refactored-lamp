{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, findViewById } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { syncViewPadding, transformData, isHorizontal } from './utils';\nimport { SERIES_FIELD_KEY, FIRST_AXES_VIEW, SECOND_AXES_VIEW } from './constant';\nvar BidirectionalBar = /** @class */function (_super) {\n  __extends(BidirectionalBar, _super);\n  function BidirectionalBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'bidirectional-bar';\n    return _this;\n  }\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  BidirectionalBar.getDefaultOptions = function () {\n    return deepAssign({}, _super.getDefaultOptions.call(this), {\n      syncViewPadding: syncViewPadding\n    });\n  };\n  /**\n   * @override\n   */\n  BidirectionalBar.prototype.changeData = function (data) {\n    if (data === void 0) {\n      data = [];\n    }\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 更新options\n    this.updateOption({\n      data: data\n    });\n    var _a = this.options,\n      xField = _a.xField,\n      yField = _a.yField,\n      layout = _a.layout;\n    // 处理数据\n    var groupData = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    var firstViewData = groupData[0],\n      secondViewData = groupData[1];\n    var firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    var secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  BidirectionalBar.prototype.getDefaultOptions = function () {\n    return BidirectionalBar.getDefaultOptions();\n  };\n  /**\n   * 获取对称条形图的适配器\n   */\n  BidirectionalBar.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /** 对称条形图分类字段 */\n  BidirectionalBar.SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n  return BidirectionalBar;\n}(Plot);\nexport { BidirectionalBar };","map":{"version":3,"names":["VIEW_LIFE_CIRCLE","Event","Plot","deepAssign","findViewById","adaptor","syncViewPadding","transformData","isHorizontal","SERIES_FIELD_KEY","FIRST_AXES_VIEW","SECOND_AXES_VIEW","BidirectionalBar","_super","__extends","_this","apply","arguments","type","getDefaultOptions","call","prototype","changeData","data","chart","emit","BEFORE_CHANGE_DATA","fromData","updateOption","_a","options","xField","yField","layout","groupData","firstViewData","secondViewData","firstView","secondView","render","AFTER_CHANGE_DATA","getSchemaAdaptor"],"sources":["../../../src/plots/bidirectional-bar/index.ts"],"sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { deepAssign, findViewById } from '../../utils';\nimport { BidirectionalBarOptions } from './types';\nimport { adaptor } from './adaptor';\nimport { syncViewPadding, transformData, isHorizontal } from './utils';\nimport { SERIES_FIELD_KEY, FIRST_AXES_VIEW, SECOND_AXES_VIEW } from './constant';\n\nexport type { BidirectionalBarOptions };\n\nexport class BidirectionalBar extends Plot<BidirectionalBarOptions> {\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<BidirectionalBarOptions> {\n    return deepAssign({}, super.getDefaultOptions(), {\n      syncViewPadding,\n    });\n  }\n\n  /** 对称条形图分类字段 */\n  static SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n\n  /** 图表类型 */\n  public type: string = 'bidirectional-bar';\n\n  /**\n   * @override\n   */\n  public changeData(data = []) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    // 更新options\n    this.updateOption({ data });\n    const { xField, yField, layout } = this.options;\n    // 处理数据\n    const groupData: any[] = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    const [firstViewData, secondViewData] = groupData;\n    const firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    const secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  protected getDefaultOptions() {\n    return BidirectionalBar.getDefaultOptions();\n  }\n\n  /**\n   * 获取对称条形图的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<BidirectionalBarOptions> {\n    return adaptor;\n  }\n}\n"],"mappings":";AAAA,SAASA,gBAAgB,EAAEC,KAAK,QAAQ,UAAU;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AAEtC,SAASC,UAAU,EAAEC,YAAY,QAAQ,aAAa;AAEtD,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,eAAe,EAAEC,aAAa,EAAEC,YAAY,QAAQ,SAAS;AACtE,SAASC,gBAAgB,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,YAAY;AAIhF,IAAAC,gBAAA,0BAAAC,MAAA;EAAsCC,SAAA,CAAAF,gBAAA,EAAAC,MAAA;EAAtC,SAAAD,iBAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IAcE;IACOF,KAAA,CAAAG,IAAI,GAAW,mBAAmB;;EAyC3C;EAvDE;;;;EAION,gBAAA,CAAAO,iBAAiB,GAAxB;IACE,OAAOhB,UAAU,CAAC,EAAE,EAAEU,MAAA,CAAMM,iBAAiB,CAAAC,IAAA,MAAE,EAAE;MAC/Cd,eAAe,EAAAA;KAChB,CAAC;EACJ,CAAC;EAQD;;;EAGOM,gBAAA,CAAAS,SAAA,CAAAC,UAAU,GAAjB,UAAkBC,IAAS;IAAT,IAAAA,IAAA;MAAAA,IAAA,KAAS;IAAA;IACzB,IAAI,CAACC,KAAK,CAACC,IAAI,CACbzB,gBAAgB,CAAC0B,kBAAkB,EACnCzB,KAAK,CAAC0B,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAExB,gBAAgB,CAAC0B,kBAAkB,EAAE,IAAI,CAAC,CACtE;IAED;IACA,IAAI,CAACE,YAAY,CAAC;MAAEL,IAAI,EAAAA;IAAA,CAAE,CAAC;IACrB,IAAAM,EAAA,GAA6B,IAAI,CAACC,OAAO;MAAvCC,MAAM,GAAAF,EAAA,CAAAE,MAAA;MAAEC,MAAM,GAAAH,EAAA,CAAAG,MAAA;MAAEC,MAAM,GAAAJ,EAAA,CAAAI,MAAiB;IAC/C;IACA,IAAMC,SAAS,GAAU3B,aAAa,CAACwB,MAAM,EAAEC,MAAM,EAAEvB,gBAAgB,EAAEc,IAAI,EAAEf,YAAY,CAACyB,MAAM,CAAC,CAAC;IAC7F,IAAAE,aAAa,GAAoBD,SAAS,GAA7B;MAAEE,cAAc,GAAIF,SAAS,GAAb;IACpC,IAAMG,SAAS,GAAGjC,YAAY,CAAC,IAAI,CAACoB,KAAK,EAAEd,eAAe,CAAC;IAC3D,IAAM4B,UAAU,GAAGlC,YAAY,CAAC,IAAI,CAACoB,KAAK,EAAEb,gBAAgB,CAAC;IAC7D;IACA0B,SAAS,CAACd,IAAI,CAACY,aAAa,CAAC;IAC7BG,UAAU,CAACf,IAAI,CAACa,cAAc,CAAC;IAC/B;IACA,IAAI,CAACZ,KAAK,CAACe,MAAM,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACf,KAAK,CAACC,IAAI,CACbzB,gBAAgB,CAACwC,iBAAiB,EAClCvC,KAAK,CAAC0B,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAExB,gBAAgB,CAACwC,iBAAiB,EAAE,IAAI,CAAC,CACrE;EACH,CAAC;EAES5B,gBAAA,CAAAS,SAAA,CAAAF,iBAAiB,GAA3B;IACE,OAAOP,gBAAgB,CAACO,iBAAiB,EAAE;EAC7C,CAAC;EAED;;;EAGUP,gBAAA,CAAAS,SAAA,CAAAoB,gBAAgB,GAA1B;IACE,OAAOpC,OAAO;EAChB,CAAC;EA5CD;EACOO,gBAAA,CAAAH,gBAAgB,GAAGA,gBAAgB;EA4C5C,OAAAG,gBAAC;CAAA,CAxDqCV,IAAI;SAA7BU,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}