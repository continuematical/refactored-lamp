{"ast":null,"code":"import { Pie, measureTextWidth } from '@antv/g2plot';\nexport default {\n  name: \"test-page\",\n  components: {},\n  props: {},\n  data() {\n    return {\n      depCountData: [{\n        title: '零食类',\n        value: 27\n      }, {\n        title: '冷冻类',\n        value: 25\n      }, {\n        title: '烟酒类',\n        value: 18\n      }, {\n        title: '生鲜类',\n        value: 15\n      }, {\n        title: '散装类',\n        value: 10\n      }, {\n        title: '水果类',\n        value: 5\n      }],\n      piePlot: {}\n    };\n  },\n  methods: {\n    init() {\n      this.initAntvFx();\n    },\n    renderStatistic(containerWidth, text, style) {\n      const {\n        width: textWidth,\n        height: textHeight\n      } = measureTextWidth(text, style);\n      const R = containerWidth / 2;\n      let scale = 1;\n      if (containerWidth < textWidth) {\n        scale = Math.min(Math.sqrt(Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))), 1);\n      }\n      const textStyleStr = `width:${containerWidth}px;`;\n      return `<div style=\"${textStyleStr};font-size:${scale}em;line-height:${scale < 1 ? 1 : 'inherit'};\">${text}</div>`;\n    },\n    initAntvFx() {\n      var that = this;\n      var data = this.depCountData;\n      this.piePlot = new Pie('container', {\n        appendPadding: 10,\n        data,\n        angleField: 'value',\n        colorField: 'title',\n        radius: 1,\n        innerRadius: 0.64,\n        meta: {\n          value: {\n            formatter: v => `${v} `\n          }\n        },\n        label: {\n          type: 'inner',\n          offset: '-50%',\n          style: {\n            textAlign: 'center'\n          },\n          autoRotate: false,\n          content: '{value}'\n        },\n        statistic: {\n          title: {\n            offsetY: -4,\n            customHtml: (container, view, datum) => {\n              const {\n                width,\n                height\n              } = container.getBoundingClientRect();\n              const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));\n              const text = datum ? datum.title : '系统访问分析';\n              return that.renderStatistic(d, text, {\n                fontSize: 28\n              });\n            }\n          },\n          content: {\n            offsetY: 4,\n            style: {\n              fontSize: '32px'\n            },\n            customHtml: (container, view, datum, data) => {\n              const {\n                width\n              } = container.getBoundingClientRect();\n              const text = datum ? ` ${datum.value}人` : ` ${data.reduce((r, d) => r + d.value, 0)}人`;\n              return that.renderStatistic(width, text, {\n                fontSize: 32\n              });\n            }\n          }\n        },\n        // 添加 中心统计文本 交互\n        interactions: [{\n          type: 'element-selected'\n        }, {\n          type: 'element-active'\n        }, {\n          type: 'pie-statistic-active'\n        }]\n      });\n      this.piePlot.render();\n      this.piePlot.on('element:click', args => {\n        that.getPieUserItemFx(args.data.data.title);\n      });\n    }\n  },\n  mounted() {\n    this.init();\n  }\n};","map":{"version":3,"names":["Pie","measureTextWidth","name","components","props","data","depCountData","title","value","piePlot","methods","init","initAntvFx","renderStatistic","containerWidth","text","style","width","textWidth","height","textHeight","R","scale","Math","min","sqrt","abs","pow","textStyleStr","that","appendPadding","angleField","colorField","radius","innerRadius","meta","formatter","v","label","type","offset","textAlign","autoRotate","content","statistic","offsetY","customHtml","container","view","datum","getBoundingClientRect","d","fontSize","reduce","r","interactions","render","on","args","getPieUserItemFx","mounted"],"sources":["src/views/demo/antv2/index.vue"],"sourcesContent":["<template>\n<div>\n    <div id=\"container\"></div>\n</div>\n</template>\n\n<script>\nimport {\n    Pie,\n    measureTextWidth\n} from '@antv/g2plot';\nexport default {\n    name: \"test-page\",\n    components: {},\n    props: {},\n    data() {\n        return {\n            depCountData: [{\n                    title: '零食类',\n                    value: 27\n                },\n                {\n                    title: '冷冻类',\n                    value: 25\n                },\n                {\n                    title: '烟酒类',\n                    value: 18\n                },\n                {\n                    title: '生鲜类',\n                    value: 15\n                },\n                {\n                    title: '散装类',\n                    value: 10\n                },\n                {\n                    title: '水果类',\n                    value: 5\n                }\n            ],\n            piePlot: {},\n        }\n    },\n    methods: {\n        init() {\n            this.initAntvFx();\n        },\n        renderStatistic(containerWidth, text, style) {\n            const {\n                width: textWidth,\n                height: textHeight\n            } = measureTextWidth(text, style);\n            const R = containerWidth / 2;\n            let scale = 1;\n            if (containerWidth < textWidth) {\n                scale = Math.min(Math.sqrt(Math.abs(Math.pow(R, 2) / (Math.pow(textWidth / 2, 2) + Math.pow(textHeight, 2)))), 1);\n            }\n            const textStyleStr = `width:${containerWidth}px;`;\n            return `<div style=\"${textStyleStr};font-size:${scale}em;line-height:${scale < 1 ? 1 : 'inherit'};\">${text}</div>`;\n        },\n        initAntvFx() {\n            var that = this;\n            var data = this.depCountData;\n            this.piePlot = new Pie('container', {\n                appendPadding: 10,\n                data,\n                angleField: 'value',\n                colorField: 'title',\n                radius: 1,\n                innerRadius: 0.64,\n                meta: {\n                    value: {\n                        formatter: (v) => `${v} `,\n                    },\n                },\n                label: {\n                    type: 'inner',\n                    offset: '-50%',\n                    style: {\n                        textAlign: 'center',\n                    },\n                    autoRotate: false,\n                    content: '{value}',\n                },\n                statistic: {\n                    title: {\n                        offsetY: -4,\n                        customHtml: (container, view, datum) => {\n                            const {\n                                width,\n                                height\n                            } = container.getBoundingClientRect();\n                            const d = Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2));\n                            const text = datum ? datum.title : '系统访问分析';\n                            return that.renderStatistic(d, text, {\n                                fontSize: 28\n                            });\n                        },\n                    },\n                    content: {\n                        offsetY: 4,\n                        style: {\n                            fontSize: '32px',\n                        },\n                        customHtml: (container, view, datum, data) => {\n                            const {\n                                width\n                            } = container.getBoundingClientRect();\n                            const text = datum ? ` ${datum.value}人` : ` ${data.reduce((r, d) => r + d.value, 0)}人`;\n                            return that.renderStatistic(width, text, {\n                                fontSize: 32\n                            });\n                        },\n                    },\n                },\n                // 添加 中心统计文本 交互\n                interactions: [{\n                    type: 'element-selected'\n                }, {\n                    type: 'element-active'\n                }, {\n                    type: 'pie-statistic-active'\n                }],\n            });\n            this.piePlot.render();\n            this.piePlot.on('element:click', (args) => {\n                that.getPieUserItemFx(args.data.data.title);\n            });\n        },\n    },\n    mounted() {\n        this.init();\n    },\n};\n</script>\n\n<style lang=\"less\" scoped>\n#container {\n    width: 100%;\n    height: 700px;\n    margin-top: 20px;\n}\n\n.antvTitle {\n    font-size: 20px;\n    text-align: center;\n    justify-content: center;\n    display: flex;\n\n    .antvSecondTitle {\n        color: #ff9900;\n        font-size: 22px;\n    }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}