{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get, isNil } from '@antv/util';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    radius = options.radius;\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius: innerRadius,\n    radius: radius\n  });\n  return params;\n}\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params, updated) {\n  var chart = params.chart,\n    options = params.options;\n  var innerRadius = options.innerRadius,\n    statistic = options.statistic,\n    percent = options.percent,\n    meta = options.meta;\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    var metaFormatter = get(meta, ['percent', 'formatter']) || function (v) {\n      return (v * 100).toFixed(2) + \"%\";\n    };\n    var contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent)\n      });\n    }\n    renderStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: contentOpt\n      }),\n      plotType: 'ring-progress'\n    }, {\n      percent: percent\n    });\n  }\n  if (updated) {\n    chart.render(true);\n  }\n  return params;\n}\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}","map":{"version":3,"names":["get","isNil","deepAssign","flow","renderStatistic","scale","animation","theme","annotation","geometry","coordinate","params","chart","options","innerRadius","radius","statistic","updated","percent","meta","getController","clear","metaFormatter","v","toFixed","contentOpt","content","__assign","plotType","render","adaptor"],"sources":["../../../src/plots/ring-progress/adaptor.ts"],"sourcesContent":["import { get, isNil } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\nimport { RingProgressOptions } from './types';\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RingProgressOptions>): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, radius } = options;\n\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius,\n    radius,\n  });\n\n  return params;\n}\n\n/**\n * statistic 配置\n * @param params\n */\nexport function statistic(params: Params<RingProgressOptions>, updated?: boolean): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    const metaFormatter = get(meta, ['percent', 'formatter']) || ((v) => `${(v * 100).toFixed(2)}%`);\n    let contentOpt = statistic.content;\n    if (contentOpt) {\n      contentOpt = deepAssign({}, contentOpt, {\n        content: !isNil(contentOpt.content) ? contentOpt.content : metaFormatter(percent),\n      });\n    }\n    renderStatistic(\n      chart,\n      { statistic: { ...statistic, content: contentOpt }, plotType: 'ring-progress' },\n      { percent }\n    );\n  }\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RingProgressOptions>) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,KAAK,QAAQ,YAAY;AAEvC,SAASC,UAAU,EAAEC,IAAI,EAAEC,eAAe,QAAQ,aAAa;AAC/D,SAASC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,UAAU,QAAQ,sBAAsB;AAC1E,SAASC,QAAQ,QAAQ,qBAAqB;AAG9C;;;;AAIA,SAASC,UAAUA,CAACC,MAAmC;EAC7C,IAAAC,KAAK,GAAcD,MAAM,CAAAC,KAApB;IAAEC,OAAO,GAAKF,MAAM,CAAAE,OAAX;EACd,IAAAC,WAAW,GAAaD,OAAO,CAAAC,WAApB;IAAEC,MAAM,GAAKF,OAAO,CAAAE,MAAZ;EAE3B;EACAH,KAAK,CAACF,UAAU,CAAC,OAAO,EAAE;IACxBI,WAAW,EAAAA,WAAA;IACXC,MAAM,EAAAA;GACP,CAAC;EAEF,OAAOJ,MAAM;AACf;AAEA;;;;AAIA,OAAM,SAAUK,SAASA,CAACL,MAAmC,EAAEM,OAAiB;EACtE,IAAAL,KAAK,GAAcD,MAAM,CAAAC,KAApB;IAAEC,OAAO,GAAKF,MAAM,CAAAE,OAAX;EACd,IAAAC,WAAW,GAA+BD,OAAO,CAAAC,WAAtC;IAAEE,SAAS,GAAoBH,OAAO,CAAAG,SAA3B;IAAEE,OAAO,GAAWL,OAAO,CAAAK,OAAlB;IAAEC,IAAI,GAAKN,OAAO,CAAAM,IAAZ;EAE7C;EACAP,KAAK,CAACQ,aAAa,CAAC,YAAY,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAE7C;EACA,IAAIP,WAAW,IAAIE,SAAS,EAAE;IAC5B,IAAMM,aAAa,GAAGtB,GAAG,CAACmB,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,IAAK,UAACI,CAAC;MAAK,OAAG,CAACA,CAAC,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,MAAG;IAA1B,CAA2B;IAChG,IAAIC,UAAU,GAAGT,SAAS,CAACU,OAAO;IAClC,IAAID,UAAU,EAAE;MACdA,UAAU,GAAGvB,UAAU,CAAC,EAAE,EAAEuB,UAAU,EAAE;QACtCC,OAAO,EAAE,CAACzB,KAAK,CAACwB,UAAU,CAACC,OAAO,CAAC,GAAGD,UAAU,CAACC,OAAO,GAAGJ,aAAa,CAACJ,OAAO;OACjF,CAAC;;IAEJd,eAAe,CACbQ,KAAK,EACL;MAAEI,SAAS,EAAAW,QAAA,CAAAA,QAAA,KAAOX,SAAS;QAAEU,OAAO,EAAED;MAAU,EAAE;MAAEG,QAAQ,EAAE;IAAe,CAAE,EAC/E;MAAEV,OAAO,EAAAA;IAAA,CAAE,CACZ;;EAGH,IAAID,OAAO,EAAE;IACXL,KAAK,CAACiB,MAAM,CAAC,IAAI,CAAC;;EAGpB,OAAOlB,MAAM;AACf;AAEA;;;;;AAKA,OAAM,SAAUmB,OAAOA,CAACnB,MAAmC;EACzD,OAAOR,IAAI,CAACM,QAAQ,EAAEJ,KAAK,CAAC,EAAE,CAAC,EAAEK,UAAU,EAAEM,SAAS,EAAEV,SAAS,EAAEC,KAAK,EAAEC,UAAU,EAAE,CAAC,CAACG,MAAM,CAAC;AACjG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}