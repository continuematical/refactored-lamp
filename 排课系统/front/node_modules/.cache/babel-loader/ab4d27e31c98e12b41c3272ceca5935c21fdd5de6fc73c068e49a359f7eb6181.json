{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\n/**\n * sunburst 处理数据\n * @param options\n */\nexport function transformData(options) {\n  var data = options.data,\n    colorField = options.colorField,\n    rawFields = options.rawFields,\n    _a = options.hierarchyConfig,\n    hierarchyConfig = _a === void 0 ? {} : _a;\n  var activeDepth = hierarchyConfig.activeDepth;\n  var transform = {\n    partition: partition,\n    treemap: treemap\n  };\n  // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n  var seriesField = options.seriesField;\n  // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n  var type = options.type || 'partition';\n  var nodes = transform[type](data, __assign(__assign({\n    field: seriesField || 'value'\n  }, omit(hierarchyConfig, ['activeDepth'])), {\n    // @ts-ignore\n    type: \"hierarchy.\" + type,\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    var _a;\n    var _b, _c, _d, _e, _f;\n    if (node.depth === 0) {\n      return null;\n    }\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n    var path = node.data.name;\n    var ancestorNode = __assign({}, node);\n    while (ancestorNode.depth > 1) {\n      path = ((_b = ancestorNode.parent.data) === null || _b === void 0 ? void 0 : _b.name) + \" / \" + path;\n      ancestorNode = ancestorNode.parent;\n    }\n    var nodeInfo = __assign(__assign(__assign({}, pick(node.data, __spreadArrays(rawFields || [], [hierarchyConfig.field]))), (_a = {}, _a[SUNBURST_PATH_FIELD] = path, _a[SUNBURST_ANCESTOR_FIELD] = ancestorNode.data.name, _a)), node);\n    // note: 兼容旧版本\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || ((_d = (_c = node.parent) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d[seriesField]);\n    }\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || ((_f = (_e = node.parent) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f[colorField]);\n    }\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = {\n      hierarchyConfig: hierarchyConfig,\n      colorField: colorField,\n      rawFields: rawFields\n    };\n    result.push(nodeInfo);\n  });\n  return result;\n}","map":{"version":3,"names":["omit","HIERARCHY_DATA_TRANSFORM_PARAMS","pick","partition","treemap","SUNBURST_ANCESTOR_FIELD","SUNBURST_PATH_FIELD","transformData","options","data","colorField","rawFields","_a","hierarchyConfig","activeDepth","transform","seriesField","type","nodes","__assign","field","as","result","forEach","node","depth","path","name","ancestorNode","_b","parent","nodeInfo","__spreadArrays","_d","_c","_f","_e","ext","push"],"sources":["../../../src/plots/sunburst/utils.ts"],"sourcesContent":["import { omit } from '@antv/util';\nimport { HIERARCHY_DATA_TRANSFORM_PARAMS } from '../../interactions/actions/drill-down';\nimport { pick } from '../../utils';\nimport { partition } from '../../utils/hierarchy/partition';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { SUNBURST_ANCESTOR_FIELD, SUNBURST_PATH_FIELD } from './constant';\nimport { SunburstOptions } from './types';\n\n/**\n * sunburst 处理数据\n * @param options\n */\nexport function transformData(options: Pick<SunburstOptions, 'data' | 'colorField' | 'rawFields' | 'hierarchyConfig'>) {\n  const { data, colorField, rawFields, hierarchyConfig = {} } = options;\n  const { activeDepth } = hierarchyConfig;\n  const transform = {\n    partition: partition,\n    treemap: treemap,\n  };\n  // @ts-ignore 兼容旧版本，支持 seriesField 来作为 hierarchyConfig.field\n  const seriesField = options.seriesField;\n  // @ts-ignore 兼容旧版本，支持矩阵树图形状的旭日图\n  const type = options.type || 'partition';\n\n  const nodes = transform[type](data, {\n    field: seriesField || 'value',\n    ...omit(hierarchyConfig, ['activeDepth']),\n    // @ts-ignore\n    type: `hierarchy.${type}`,\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n    if (activeDepth > 0 && node.depth > activeDepth) {\n      return null;\n    }\n\n    let path = node.data.name;\n    let ancestorNode = { ...node };\n    while (ancestorNode.depth > 1) {\n      path = `${ancestorNode.parent.data?.name} / ${path}`;\n      ancestorNode = ancestorNode.parent;\n    }\n\n    const nodeInfo = {\n      ...pick(node.data, [...(rawFields || []), hierarchyConfig.field]),\n      [SUNBURST_PATH_FIELD]: path,\n      [SUNBURST_ANCESTOR_FIELD]: ancestorNode.data.name,\n      ...node,\n    };\n    // note: 兼容旧版本\n    if (seriesField) {\n      nodeInfo[seriesField] = node.data[seriesField] || node.parent?.data?.[seriesField];\n    }\n    if (colorField) {\n      nodeInfo[colorField] = node.data[colorField] || node.parent?.data?.[colorField];\n    }\n    nodeInfo.ext = hierarchyConfig;\n    nodeInfo[HIERARCHY_DATA_TRANSFORM_PARAMS] = { hierarchyConfig, colorField, rawFields };\n    result.push(nodeInfo);\n  });\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}