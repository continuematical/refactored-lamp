{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n// 注册 shape\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n/**\n * 仪表盘\n */\nvar Gauge = /** @class */function (_super) {\n  __extends(Gauge, _super);\n  function Gauge() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'gauge';\n    return _this;\n  }\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n  Gauge.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n  Gauge.prototype.changeData = function (percent) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    this.updateOption({\n      percent: percent\n    });\n    var indicatorView = this.chart.views.find(function (v) {\n      return v.id === INDICATEOR_VIEW_ID;\n    });\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n    var rangeView = this.chart.views.find(function (v) {\n      return v.id === RANGE_VIEW_ID;\n    });\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    }\n    // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n  Gauge.prototype.getDefaultOptions = function () {\n    return Gauge.getDefaultOptions();\n  };\n  /**\n   * 获取适配器\n   */\n  Gauge.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  return Gauge;\n}(Plot);\nexport { Gauge };","map":{"version":3,"names":["VIEW_LIFE_CIRCLE","Event","Plot","adaptor","statistic","INDICATEOR_VIEW_ID","RANGE_VIEW_ID","DEFAULT_OPTIONS","getIndicatorData","getRangeData","Gauge","_super","__extends","_this","apply","arguments","type","getDefaultOptions","prototype","changeData","percent","chart","emit","BEFORE_CHANGE_DATA","fromData","updateOption","indicatorView","views","find","v","id","data","rangeView","options","range","AFTER_CHANGE_DATA","getSchemaAdaptor"],"sources":["../../../src/plots/gauge/index.ts"],"sourcesContent":["import { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { GaugeOptions } from './types';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils';\n\n// 注册 shape\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n\nexport type { GaugeOptions };\n\n/**\n * 仪表盘\n */\nexport class Gauge extends Plot<GaugeOptions> {\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<GaugeOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public type: string = 'gauge';\n\n  /**\n   * 更新数据\n   * @param percent\n   */\n  public changeData(percent: number) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    this.updateOption({ percent });\n    const indicatorView = this.chart.views.find((v) => v.id === INDICATEOR_VIEW_ID);\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n\n    const rangeView = this.chart.views.find((v) => v.id === RANGE_VIEW_ID);\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    }\n    // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n    statistic({ chart: this.chart, options: this.options }, true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n  protected getDefaultOptions() {\n    return Gauge.getDefaultOptions();\n  }\n\n  /**\n   * 获取适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<GaugeOptions> {\n    return adaptor;\n  }\n}\n"],"mappings":";AAAA,SAASA,gBAAgB,EAAEC,KAAK,QAAQ,UAAU;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AAGtC,SAASC,OAAO,EAAEC,SAAS,QAAQ,WAAW;AAC9C,SAASC,kBAAkB,EAAEC,aAAa,EAAEC,eAAe,QAAQ,aAAa;AAChF,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,SAAS;AAExD;AACA,OAAO,oBAAoB;AAC3B,OAAO,sBAAsB;AAI7B;;;AAGA,IAAAC,KAAA,0BAAAC,MAAA;EAA2BC,SAAA,CAAAF,KAAA,EAAAC,MAAA;EAA3B,SAAAD,MAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IASE;IACOF,KAAA,CAAAG,IAAI,GAAW,OAAO;;EA6C/B;EAtDE;;;;EAION,KAAA,CAAAO,iBAAiB,GAAxB;IACE,OAAOV,eAAe;EACxB,CAAC;EAKD;;;;EAIOG,KAAA,CAAAQ,SAAA,CAAAC,UAAU,GAAjB,UAAkBC,OAAe;IAC/B,IAAI,CAACC,KAAK,CAACC,IAAI,CACbtB,gBAAgB,CAACuB,kBAAkB,EACnCtB,KAAK,CAACuB,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAErB,gBAAgB,CAACuB,kBAAkB,EAAE,IAAI,CAAC,CACtE;IAED,IAAI,CAACE,YAAY,CAAC;MAAEL,OAAO,EAAAA;IAAA,CAAE,CAAC;IAC9B,IAAMM,aAAa,GAAG,IAAI,CAACL,KAAK,CAACM,KAAK,CAACC,IAAI,CAAC,UAACC,CAAC;MAAK,OAAAA,CAAC,CAACC,EAAE,KAAKzB,kBAAkB;IAA3B,CAA2B,CAAC;IAC/E,IAAIqB,aAAa,EAAE;MACjBA,aAAa,CAACK,IAAI,CAACvB,gBAAgB,CAACY,OAAO,CAAC,CAAC;;IAG/C,IAAMY,SAAS,GAAG,IAAI,CAACX,KAAK,CAACM,KAAK,CAACC,IAAI,CAAC,UAACC,CAAC;MAAK,OAAAA,CAAC,CAACC,EAAE,KAAKxB,aAAa;IAAtB,CAAsB,CAAC;IACtE,IAAI0B,SAAS,EAAE;MACbA,SAAS,CAACD,IAAI,CAACtB,YAAY,CAACW,OAAO,EAAE,IAAI,CAACa,OAAO,CAACC,KAAK,CAAC,CAAC;;IAE3D;IACA9B,SAAS,CAAC;MAAEiB,KAAK,EAAE,IAAI,CAACA,KAAK;MAAEY,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,EAAE,IAAI,CAAC;IAE7D,IAAI,CAACZ,KAAK,CAACC,IAAI,CACbtB,gBAAgB,CAACmC,iBAAiB,EAClClC,KAAK,CAACuB,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAErB,gBAAgB,CAACmC,iBAAiB,EAAE,IAAI,CAAC,CACrE;EACH,CAAC;EAED;;;;EAIUzB,KAAA,CAAAQ,SAAA,CAAAD,iBAAiB,GAA3B;IACE,OAAOP,KAAK,CAACO,iBAAiB,EAAE;EAClC,CAAC;EAED;;;EAGUP,KAAA,CAAAQ,SAAA,CAAAkB,gBAAgB,GAA1B;IACE,OAAOjC,OAAO;EAChB,CAAC;EACH,OAAAO,KAAC;AAAD,CAAC,CAvD0BR,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}