{"ast":null,"code":"/**\n * 在 Chart 中查找特定 id 的子 View\n * @param chart\n * @param id\n */\nexport function findViewById(chart, id) {\n  return chart.views.find(function (view) {\n    return view.id === id;\n  });\n}\n/**\n * 获取同 view 同一级的所有 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getViews(view) {\n  var parent = view.parent;\n  return parent ? parent.views : [];\n}\n/**\n * 获取同 view 同一级的 views，不包括自身\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSiblingViews(view) {\n  return getViews(view).filter(function (sub) {\n    return sub !== view;\n  });\n}","map":{"version":3,"names":["findViewById","chart","id","views","find","view","getViews","parent","getSiblingViews","filter","sub"],"sources":["../../src/utils/view.ts"],"sourcesContent":["import { View } from '@antv/g2';\n\n/**\n * 在 Chart 中查找特定 id 的子 View\n * @param chart\n * @param id\n */\nexport function findViewById(chart: View, id: string): View {\n  return chart.views.find((view: View) => view.id === id);\n}\n\n/**\n * 获取同 view 同一级的所有 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getViews(view: View): View[] {\n  const parent = view.parent;\n  return parent ? parent.views : [];\n}\n\n/**\n * 获取同 view 同一级的 views，不包括自身\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSiblingViews(view: View): View[] {\n  return getViews(view).filter((sub) => sub !== view);\n}\n"],"mappings":"AAEA;;;;;AAKA,OAAM,SAAUA,YAAYA,CAACC,KAAW,EAAEC,EAAU;EAClD,OAAOD,KAAK,CAACE,KAAK,CAACC,IAAI,CAAC,UAACC,IAAU;IAAK,OAAAA,IAAI,CAACH,EAAE,KAAKA,EAAE;EAAd,CAAc,CAAC;AACzD;AAEA;;;;;;AAMA,OAAM,SAAUI,QAAQA,CAACD,IAAU;EACjC,IAAME,MAAM,GAAGF,IAAI,CAACE,MAAM;EAC1B,OAAOA,MAAM,GAAGA,MAAM,CAACJ,KAAK,GAAG,EAAE;AACnC;AAEA;;;;;;AAMA,OAAM,SAAUK,eAAeA,CAACH,IAAU;EACxC,OAAOC,QAAQ,CAACD,IAAI,CAAC,CAACI,MAAM,CAAC,UAACC,GAAG;IAAK,OAAAA,GAAG,KAAKL,IAAI;EAAZ,CAAY,CAAC;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}