{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { transformToViewsData } from './helper';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  var _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  return deepAssign({}, {\n    options: {\n      tooltip: {\n        fields: uniq(__spreadArrays(['name', 'source', 'target', 'value', 'isNode'], rawFields))\n      },\n      label: {\n        fields: uniq(__spreadArrays(['x', 'name'], rawFields))\n      }\n    }\n  }, params);\n}\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var color = options.color,\n    nodeStyle = options.nodeStyle,\n    edgeStyle = options.edgeStyle,\n    label = options.label,\n    tooltip = options.tooltip,\n    nodeState = options.nodeState,\n    edgeState = options.edgeState;\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n  // 2. node edge views\n  // @ts-ignore\n  var _a = transformToViewsData(options, chart.width, chart.height),\n    nodes = _a.nodes,\n    edges = _a.edges;\n  // edge view\n  var edgeView = chart.createView({\n    id: EDGES_VIEW_ID\n  });\n  edgeView.data(edges);\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color: color,\n        style: edgeStyle,\n        shape: 'arc'\n      },\n      tooltip: tooltip,\n      state: edgeState\n    }\n  });\n  var nodeView = chart.createView({\n    id: NODES_VIEW_ID\n  });\n  nodeView.data(nodes);\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color: color,\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: tooltip,\n      state: nodeState\n    }\n  });\n  chart.interaction('element-active');\n  // scale\n  chart.scale({\n    x: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    y: {\n      sync: true,\n      nice: true,\n      min: 0,\n      max: 1,\n      minLimit: 0,\n      maxLimit: 1\n    },\n    name: {\n      sync: 'color',\n      type: 'cat'\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\nexport function animation(params) {\n  var chart = params.chart,\n    options = params.options;\n  var animation = options.animation;\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n  var geometries = __spreadArrays(chart.views[0].geometries, chart.views[1].geometries);\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  geometries.forEach(function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params) {\n  var chart = params.chart,\n    options = params.options;\n  var nodeDraggable = options.nodeDraggable;\n  var DRAG_INTERACTION = 'sankey-node-draggable';\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\nfunction interaction(params) {\n  var chart = params.chart,\n    options = params.options;\n  var _a = options.interactions,\n    interactions = _a === void 0 ? [] : _a;\n  var nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  var edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n  var nodeView = findViewById(chart, NODES_VIEW_ID);\n  var edgeView = findViewById(chart, EDGES_VIEW_ID);\n  nodeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  edgeInteractions.forEach(function (i) {\n    if ((i === null || i === void 0 ? void 0 : i.enable) === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(defaultOptions, geometry, interaction, nodeDraggable, animation, theme\n  // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"names":["uniq","theme","deepAssign","findViewById","flow","polygon","edge","transformToViewsData","X_FIELD","Y_FIELD","COLOR_FIELD","EDGES_VIEW_ID","NODES_VIEW_ID","defaultOptions","params","options","_a","rawFields","tooltip","fields","__spreadArrays","label","geometry","chart","color","nodeStyle","edgeStyle","nodeState","edgeState","legend","axis","coordinate","reflect","width","height","nodes","edges","edgeView","createView","id","data","xField","yField","seriesField","style","shape","state","nodeView","interaction","scale","x","sync","nice","min","max","minLimit","maxLimit","y","name","type","animation","animate","geometries","views","forEach","g","nodeDraggable","DRAG_INTERACTION","removeInteraction","interactions","nodeInteractions","concat","edgeInteractions","i","enable","cfg","adaptor"],"sources":["../../../src/plots/sankey/adaptor.ts"],"sourcesContent":["import { uniq } from '@antv/util';\nimport { theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, findViewById, flow } from '../../utils';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { transformToViewsData } from './helper';\nimport { SankeyOptions } from './types';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD, EDGES_VIEW_ID, NODES_VIEW_ID } from './constant';\n\n/**\n * 默认配置项 处理\n * @param params\n */\nfunction defaultOptions(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { options } = params;\n  const { rawFields = [] } = options;\n\n  return deepAssign(\n    {},\n    {\n      options: {\n        tooltip: {\n          fields: uniq(['name', 'source', 'target', 'value', 'isNode', ...rawFields]),\n        },\n        label: {\n          fields: uniq(['x', 'name', ...rawFields]),\n        },\n      },\n    },\n    params\n  );\n}\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { color, nodeStyle, edgeStyle, label, tooltip, nodeState, edgeState } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n  // y 镜像一下，防止图形顺序和数据顺序反了\n  chart.coordinate().reflect('y');\n\n  // 2. node edge views\n  // @ts-ignore\n  const { nodes, edges } = transformToViewsData(options, chart.width, chart.height);\n\n  // edge view\n  const edgeView = chart.createView({ id: EDGES_VIEW_ID });\n  edgeView.data(edges);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: edgeState,\n    },\n  });\n\n  const nodeView = chart.createView({ id: NODES_VIEW_ID });\n  nodeView.data(nodes);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip,\n      state: nodeState,\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    y: { sync: true, nice: true, min: 0, max: 1, minLimit: 0, maxLimit: 1 },\n    name: { sync: 'color', type: 'cat' },\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  const geometries = [...chart.views[0].geometries, ...chart.views[1].geometries];\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  geometries.forEach((g) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 节点拖动\n * @param params\n */\nexport function nodeDraggable(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { nodeDraggable } = options;\n\n  const DRAG_INTERACTION = 'sankey-node-draggable';\n\n  if (nodeDraggable) {\n    chart.interaction(DRAG_INTERACTION);\n  } else {\n    chart.removeInteraction(DRAG_INTERACTION);\n  }\n\n  return params;\n}\n\n/**\n * Interaction 配置\n * @param params\n */\nfunction interaction(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const { interactions = [] } = options;\n\n  const nodeInteractions = [].concat(interactions, options.nodeInteractions || []);\n  const edgeInteractions = [].concat(interactions, options.edgeInteractions || []);\n\n  const nodeView = findViewById(chart, NODES_VIEW_ID);\n  const edgeView = findViewById(chart, EDGES_VIEW_ID);\n\n  nodeInteractions.forEach((i) => {\n    if (i?.enable === false) {\n      nodeView.removeInteraction(i.type);\n    } else {\n      nodeView.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  edgeInteractions.forEach((i) => {\n    if (i?.enable === false) {\n      edgeView.removeInteraction(i.type);\n    } else {\n      edgeView.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    defaultOptions,\n    geometry,\n    interaction,\n    nodeDraggable,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}